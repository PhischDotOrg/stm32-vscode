{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "(lldb) Starten",
            "type": "cppdbg",
            "request": "launch",
            "program": "${command:cmake.launchTargetPath}",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "lldb"
        },
        {           
            "name" : "Remote C/C++ GDB",
            "type" :"cppdbg",
            "request": "launch",
            "program": "${workspaceRoot}/build/common/firmware.elf",
            "miDebuggerServerAddress": "localhost:4242",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceRoot}/build",
            "environment": [],
            "externalConsole": false,
            "osx" : {
                "miDebuggerPath": "arm-none-eabi-gdb"
            },
            "windows": {
                "miDebuggerPath": "c:\\Program Files (x86)\\GNU Tools Arm Embedded\\9 2019-q4-major\\bin\\arm-none-eabi-gdb.exe"
            },
            "linux" : {
                "miDebuggerPath": "gdb-multiarch",
            },
            /*
             * The "preLaunchTask" could theoretically be used to start the GDB server (i.e. OpenOCD). However,
             * OpenOCD will start as a server but doesn't spawn into the background. Hence, this task will never
             * complete from a VisualStudio Code Perspective.
             */
            // "preLaunchTask" : "Start OpenOCD (GDB Server)"
            /*
            "logging": {
                "moduleLoad": true,
                "trace": true,
                "engineLogging": true,
                "programOutput": true,
                "exceptions": true
             },
           */
        },
        {
            "name": "Black Magic Probe",
            "type": "cppdbg",
            "request": "launch",
            /* "preLaunchTask": "build", */
            "cwd": "${workspaceRoot}",
            "MIMode": "gdb",
            "targetArchitecture": "arm",
            "logging": {
                "engineLogging": true
            },
            "program": "${workspaceRoot}/build/common/firmware.elf",
            "miDebuggerPath": "arm-none-eabi-gdb",
            "customLaunchSetupCommands": [
                { "text": "cd ${workspaceRoot}/build/common" },
                { "text": "target extended-remote /dev/cu.usbmodem4D81905D1" },
                { "text": "monitor swdp_scan" },
                { "text": "attach 1" },
                { "text": "file firmware.elf" },
                { "text": "load" },
                { "text": "cd ${workspaceRoot}" /* set bath back so VScode can find source files */ },
                { "text": "set mem inaccessible-by-default off" },
                { "text": "break main" }
            ],
            "serverLaunchTimeout": 10000,
            "windows": {
                "miDebuggerPath": "arm-none-eabi-gdb.exe"
            }
        }
    ]
}
